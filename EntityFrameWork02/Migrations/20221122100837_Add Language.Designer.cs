// <auto-generated />
using System;
using EntityFrameWork02.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntityFrameWork02.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221122100837_Add Language")]
    partial class AddLanguage
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CityCountry", b =>
                {
                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CityName", "CountryName");

                    b.HasIndex("CountryName");

                    b.ToTable("CityCountry");
                });

            modelBuilder.Entity("CityPerson", b =>
                {
                    b.Property<string>("CitysName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PeopleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CitysName", "PeopleId");

                    b.HasIndex("PeopleId");

                    b.ToTable("CityPerson");
                });

            modelBuilder.Entity("CountryPerson", b =>
                {
                    b.Property<string>("CountrysName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PersonId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CountrysName", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("CountryPerson");
                });

            modelBuilder.Entity("EntityFrameWork02.Models.City", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Register")
                        .HasColumnType("datetime2");

                    b.HasKey("Name");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Name = "Åre",
                            PostNumber = "123 45",
                            Register = new DateTime(2022, 11, 22, 11, 8, 37, 470, DateTimeKind.Local).AddTicks(3733)
                        },
                        new
                        {
                            Name = "Järpen",
                            PostNumber = "123 45",
                            Register = new DateTime(2022, 11, 22, 11, 8, 37, 470, DateTimeKind.Local).AddTicks(3748)
                        },
                        new
                        {
                            Name = "Östersund",
                            PostNumber = "123 88",
                            Register = new DateTime(2022, 11, 22, 11, 8, 37, 470, DateTimeKind.Local).AddTicks(3758)
                        });
                });

            modelBuilder.Entity("EntityFrameWork02.Models.Country", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Register")
                        .HasColumnType("datetime2");

                    b.HasKey("Name");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Name = "Sweden",
                            Register = new DateTime(2022, 11, 22, 11, 8, 37, 470, DateTimeKind.Local).AddTicks(3770)
                        },
                        new
                        {
                            Name = "Norway",
                            Register = new DateTime(2022, 11, 22, 11, 8, 37, 470, DateTimeKind.Local).AddTicks(3781)
                        },
                        new
                        {
                            Name = "Danmark",
                            Register = new DateTime(2022, 11, 22, 11, 8, 37, 470, DateTimeKind.Local).AddTicks(3789)
                        });
                });

            modelBuilder.Entity("EntityFrameWork02.Models.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("EfterName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Register")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Person");

                    b.HasData(
                        new
                        {
                            Id = "c7924601-d8d3-4a4c-8da9-6c04a11aa5be",
                            Age = 32,
                            EfterName = "Khokho",
                            Name = "Ali",
                            PhoneNumer = "123456",
                            Register = new DateTime(2022, 11, 22, 11, 8, 37, 470, DateTimeKind.Local).AddTicks(3344)
                        },
                        new
                        {
                            Id = "dd1990e3-527b-4f5e-af17-7d1a070b746f",
                            Age = 23,
                            EfterName = "klhpioj",
                            Name = "Ali01",
                            PhoneNumer = "123546",
                            Register = new DateTime(2022, 11, 22, 11, 8, 37, 470, DateTimeKind.Local).AddTicks(3594)
                        },
                        new
                        {
                            Id = "1cf34e97-79ad-4557-be41-b998c8ecd2ed",
                            Age = 23,
                            EfterName = "klhpioj",
                            Name = "Ali02",
                            PhoneNumer = "123546",
                            Register = new DateTime(2022, 11, 22, 11, 8, 37, 470, DateTimeKind.Local).AddTicks(3706)
                        },
                        new
                        {
                            Id = "1fb64e2f-150e-4d23-823a-3e3de2b74bd7",
                            Age = 23,
                            EfterName = "klhpioj",
                            Name = "Ali03",
                            PhoneNumer = "123546",
                            Register = new DateTime(2022, 11, 22, 11, 8, 37, 470, DateTimeKind.Local).AddTicks(3718)
                        });
                });

            modelBuilder.Entity("CityCountry", b =>
                {
                    b.HasOne("EntityFrameWork02.Models.City", null)
                        .WithMany()
                        .HasForeignKey("CityName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameWork02.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CityPerson", b =>
                {
                    b.HasOne("EntityFrameWork02.Models.City", null)
                        .WithMany()
                        .HasForeignKey("CitysName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameWork02.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryPerson", b =>
                {
                    b.HasOne("EntityFrameWork02.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountrysName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameWork02.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
