// <auto-generated />
using System;
using EntityFrameWork02.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntityFrameWork02.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221124195230_Seeded Many-To-Many Table")]
    partial class SeededManyToManyTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CityCountry", b =>
                {
                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CityId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("CityCountry");
                });

            modelBuilder.Entity("CityLanguage", b =>
                {
                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LanguageId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CityId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CityLanguage");
                });

            modelBuilder.Entity("CityPerson", b =>
                {
                    b.Property<string>("CitysId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PeopleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CitysId", "PeopleId");

                    b.HasIndex("PeopleId");

                    b.ToTable("CityPerson");
                });

            modelBuilder.Entity("CountryLanguage", b =>
                {
                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LanguageId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CountryId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CountryLanguage");
                });

            modelBuilder.Entity("CountryPerson", b =>
                {
                    b.Property<string>("CountrysId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PersonId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CountrysId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("CountryPerson");
                });

            modelBuilder.Entity("EntityFrameWork02.Models.City", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Register")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = "7534d275-5802-4814-a8c5-6d2802a4073c",
                            Name = "Åre",
                            PostNumber = "123 45",
                            Register = new DateTime(2022, 11, 24, 20, 52, 29, 729, DateTimeKind.Local).AddTicks(4876)
                        },
                        new
                        {
                            Id = "cd3cc49b-bdbb-4b04-bb28-57a085d33b8e",
                            Name = "Järpen",
                            PostNumber = "123 45",
                            Register = new DateTime(2022, 11, 24, 20, 52, 29, 729, DateTimeKind.Local).AddTicks(4893)
                        },
                        new
                        {
                            Id = "a8624464-79e8-4f5f-a36b-7fda04a44c55",
                            Name = "Östersund",
                            PostNumber = "123 88",
                            Register = new DateTime(2022, 11, 24, 20, 52, 29, 729, DateTimeKind.Local).AddTicks(4912)
                        });
                });

            modelBuilder.Entity("EntityFrameWork02.Models.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Register")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = "d31022fc-e7e1-4b68-a03e-cb0210433cd0",
                            Name = "Sweden",
                            Register = new DateTime(2022, 11, 24, 20, 52, 29, 729, DateTimeKind.Local).AddTicks(4934)
                        },
                        new
                        {
                            Id = "bd1261a6-2d4a-4658-95f5-d4bc3544fbcd",
                            Name = "Norway",
                            Register = new DateTime(2022, 11, 24, 20, 52, 29, 729, DateTimeKind.Local).AddTicks(4948)
                        },
                        new
                        {
                            Id = "8e58668c-bbca-4ee4-8d3d-c892d509c669",
                            Name = "Danmark",
                            Register = new DateTime(2022, 11, 24, 20, 52, 29, 729, DateTimeKind.Local).AddTicks(4961)
                        });
                });

            modelBuilder.Entity("EntityFrameWork02.Models.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            Id = "a1802cc7-e32d-4827-8cc1-0f9d1eeba87b",
                            Name = "Svenska"
                        },
                        new
                        {
                            Id = "c44099a7-de4a-49dc-9470-2df0af525582",
                            Name = "Swedish"
                        },
                        new
                        {
                            Id = "e3245a09-a97d-467a-a4e8-f8d8627b458d",
                            Name = "Norske"
                        },
                        new
                        {
                            Id = "445824e5-851c-44d6-a2c9-3abdd5a6c132",
                            Name = "Periska"
                        });
                });

            modelBuilder.Entity("EntityFrameWork02.Models.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Register")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Person");

                    b.HasData(
                        new
                        {
                            Id = "7f83808d-be3f-48ee-a1e9-a01777891a64",
                            Age = 32,
                            Name = "Ali",
                            PhoneNumber = "123456",
                            Register = new DateTime(2022, 11, 24, 20, 52, 29, 729, DateTimeKind.Local).AddTicks(3790)
                        },
                        new
                        {
                            Id = "e259343a-7ee6-4aa7-a6c5-426a88df45e9",
                            Age = 32,
                            Name = "Ali",
                            PhoneNumber = "123456",
                            Register = new DateTime(2022, 11, 24, 20, 52, 29, 729, DateTimeKind.Local).AddTicks(4801)
                        },
                        new
                        {
                            Id = "dffd409f-7f53-4d6a-a0f5-5988a8fa70e5",
                            Age = 23,
                            Name = "Ali01",
                            PhoneNumber = "123546",
                            Register = new DateTime(2022, 11, 24, 20, 52, 29, 729, DateTimeKind.Local).AddTicks(4826)
                        },
                        new
                        {
                            Id = "375f8470-f18f-4f9f-b91c-aebfc266b104",
                            Age = 23,
                            Name = "Ali02",
                            PhoneNumber = "123546",
                            Register = new DateTime(2022, 11, 24, 20, 52, 29, 729, DateTimeKind.Local).AddTicks(4840)
                        },
                        new
                        {
                            Id = "2b2cbe24-2bba-42ae-9054-f8aeabe7c0e0",
                            Age = 23,
                            Name = "Ali03",
                            PhoneNumber = "123546",
                            Register = new DateTime(2022, 11, 24, 20, 52, 29, 729, DateTimeKind.Local).AddTicks(4853)
                        });
                });

            modelBuilder.Entity("LanguagePerson", b =>
                {
                    b.Property<string>("LanguagesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PersonId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LanguagesId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("LanguagePerson");

                    b.HasData(
                        new
                        {
                            LanguagesId = "a1802cc7-e32d-4827-8cc1-0f9d1eeba87b",
                            PersonId = "7f83808d-be3f-48ee-a1e9-a01777891a64"
                        });
                });

            modelBuilder.Entity("CityCountry", b =>
                {
                    b.HasOne("EntityFrameWork02.Models.City", null)
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameWork02.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CityLanguage", b =>
                {
                    b.HasOne("EntityFrameWork02.Models.City", null)
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameWork02.Models.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CityPerson", b =>
                {
                    b.HasOne("EntityFrameWork02.Models.City", null)
                        .WithMany()
                        .HasForeignKey("CitysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameWork02.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryLanguage", b =>
                {
                    b.HasOne("EntityFrameWork02.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameWork02.Models.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryPerson", b =>
                {
                    b.HasOne("EntityFrameWork02.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountrysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameWork02.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LanguagePerson", b =>
                {
                    b.HasOne("EntityFrameWork02.Models.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameWork02.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
