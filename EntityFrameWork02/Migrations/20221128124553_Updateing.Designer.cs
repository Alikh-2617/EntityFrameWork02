// <auto-generated />
using System;
using EntityFrameWork02.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntityFrameWork02.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221128124553_Updateing")]
    partial class Updateing
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CityCountry", b =>
                {
                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CityId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("CityCountry");
                });

            modelBuilder.Entity("CityLanguage", b =>
                {
                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LanguageId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CityId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CityLanguage");
                });

            modelBuilder.Entity("CityPerson", b =>
                {
                    b.Property<string>("CitysId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PeopleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CitysId", "PeopleId");

                    b.HasIndex("PeopleId");

                    b.ToTable("CityPerson");
                });

            modelBuilder.Entity("CountryLanguage", b =>
                {
                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LanguageId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CountryId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CountryLanguage");
                });

            modelBuilder.Entity("CountryPerson", b =>
                {
                    b.Property<string>("CountrysId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PersonId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CountrysId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("CountryPerson");
                });

            modelBuilder.Entity("EntityFrameWork02.Models.City", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Register")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = "4296ab28-83a1-4d9a-9fcd-534b66826c5d",
                            Name = "Åre",
                            PostNumber = "123 45",
                            Register = new DateTime(2022, 11, 28, 13, 45, 53, 84, DateTimeKind.Local).AddTicks(1153)
                        },
                        new
                        {
                            Id = "a05a284b-c11b-4c4b-9204-085af4f02919",
                            Name = "Järpen",
                            PostNumber = "123 45",
                            Register = new DateTime(2022, 11, 28, 13, 45, 53, 84, DateTimeKind.Local).AddTicks(1169)
                        },
                        new
                        {
                            Id = "b625580c-f586-4931-b768-bb598907935e",
                            Name = "Östersund",
                            PostNumber = "123 88",
                            Register = new DateTime(2022, 11, 28, 13, 45, 53, 84, DateTimeKind.Local).AddTicks(1180)
                        });
                });

            modelBuilder.Entity("EntityFrameWork02.Models.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Register")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = "1dac1216-c371-4116-945a-557a8f7e898a",
                            Name = "Sweden",
                            Register = new DateTime(2022, 11, 28, 13, 45, 53, 84, DateTimeKind.Local).AddTicks(1196)
                        },
                        new
                        {
                            Id = "e5248d30-8efa-4033-b6cb-f9bd4e30ca29",
                            Name = "Norway",
                            Register = new DateTime(2022, 11, 28, 13, 45, 53, 84, DateTimeKind.Local).AddTicks(1211)
                        },
                        new
                        {
                            Id = "a9f85dc3-cd7a-4d7e-b7d8-378db736b24b",
                            Name = "Danmark",
                            Register = new DateTime(2022, 11, 28, 13, 45, 53, 84, DateTimeKind.Local).AddTicks(1222)
                        });
                });

            modelBuilder.Entity("EntityFrameWork02.Models.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            Id = "6aec7ffb-9dc7-4534-b36e-0c2b1e229c0d",
                            Name = "Svenska"
                        },
                        new
                        {
                            Id = "a38e2959-5642-4481-8376-71a3c56454b7",
                            Name = "Swedish"
                        },
                        new
                        {
                            Id = "76d2b0db-3898-4601-9dc6-77a0a5a9a21f",
                            Name = "Norske"
                        },
                        new
                        {
                            Id = "e67552fd-e74f-4a4e-a13a-e161d8a346a0",
                            Name = "Periska"
                        });
                });

            modelBuilder.Entity("EntityFrameWork02.Models.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Register")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Person");

                    b.HasData(
                        new
                        {
                            Id = "0188ef56-fdea-491f-9eab-5f745718df52",
                            Age = 32,
                            Name = "Ali",
                            PhoneNumber = "123456",
                            Register = new DateTime(2022, 11, 28, 13, 45, 53, 84, DateTimeKind.Local).AddTicks(246)
                        },
                        new
                        {
                            Id = "ce69d98b-ab1e-4bfb-a02b-634dded72a3d",
                            Age = 23,
                            Name = "Ali01",
                            PhoneNumber = "123546",
                            Register = new DateTime(2022, 11, 28, 13, 45, 53, 84, DateTimeKind.Local).AddTicks(1091)
                        },
                        new
                        {
                            Id = "bc272863-ad60-4a0c-9195-cbc34df791e2",
                            Age = 23,
                            Name = "Ali02",
                            PhoneNumber = "123546",
                            Register = new DateTime(2022, 11, 28, 13, 45, 53, 84, DateTimeKind.Local).AddTicks(1110)
                        },
                        new
                        {
                            Id = "dbf7e291-7929-4fc6-99e7-22ecf46aeeda",
                            Age = 23,
                            Name = "Ali03",
                            PhoneNumber = "123546",
                            Register = new DateTime(2022, 11, 28, 13, 45, 53, 84, DateTimeKind.Local).AddTicks(1135)
                        });
                });

            modelBuilder.Entity("LanguagePerson", b =>
                {
                    b.Property<string>("LanguagesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PersonId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LanguagesId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("LanguagePerson");

                    b.HasData(
                        new
                        {
                            LanguagesId = "6aec7ffb-9dc7-4534-b36e-0c2b1e229c0d",
                            PersonId = "0188ef56-fdea-491f-9eab-5f745718df52"
                        });
                });

            modelBuilder.Entity("CityCountry", b =>
                {
                    b.HasOne("EntityFrameWork02.Models.City", null)
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameWork02.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CityLanguage", b =>
                {
                    b.HasOne("EntityFrameWork02.Models.City", null)
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameWork02.Models.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CityPerson", b =>
                {
                    b.HasOne("EntityFrameWork02.Models.City", null)
                        .WithMany()
                        .HasForeignKey("CitysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameWork02.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryLanguage", b =>
                {
                    b.HasOne("EntityFrameWork02.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameWork02.Models.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryPerson", b =>
                {
                    b.HasOne("EntityFrameWork02.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountrysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameWork02.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LanguagePerson", b =>
                {
                    b.HasOne("EntityFrameWork02.Models.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameWork02.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
